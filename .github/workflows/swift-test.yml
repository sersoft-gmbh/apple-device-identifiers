name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-spm:
    strategy:
      matrix:
        os: [ macos-12 ]
        swift-version: [ '' ]
        xcode-version: [ '^13.4' ]
        include:
          - os: macos-12
            swift-version: ''
            xcode-version: '^14.1'
          # - os: ubuntu-20.04
          #   swift-version: 5.5
          #   xcode-version: ''
          # - os: ubuntu-20.04
          #   swift-version: 5.6
          #   xcode-version: ''
          # - os: ubuntu-20.04
          #   swift-version: 5.7
          #   xcode-version: ''
          # - os: ubuntu-22.04
          #   swift-version: 5.7
          #   xcode-version: ''

    runs-on: ${{ matrix.os }}

    steps:
      - if: ${{ runner.os == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ${{ matrix.xcode-version }}
      - name: Install Swift
        if: ${{ runner.os == 'Linux' }}
        uses: sersoft-gmbh/swifty-linux-action@v2.1.1
        with:
          release-version: ${{ matrix.swift-version }}
          platform: ${{ matrix.os }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Read OS Version
        uses: sersoft-gmbh/os-version-action@v2.0.1
        id: os-version
      - name: Read Swift Version
        uses: sersoft-gmbh/swift-version-action@v2.0.1
        id: swift-version
      - uses: actions/checkout@v3.1.0
      - uses: actions/cache@v3.0.11
        with:
          path: .build
          key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-
      - name: Build & Test
        run: swift test -v --parallel --enable-code-coverage
      - name: Generate Coverage Files
        uses: sersoft-gmbh/swift-coverage-action@v3.0.1
        id: coverage-files
      - uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ join(fromJSON(steps.coverage-files.outputs.files), ',') }}
          fail_ci_if_error: true

  test-xcode:
    runs-on: macos-12
    strategy:
      matrix:
        platform:
          - macOS
          - iOS
          - iPadOS
          - tvOS
          - watchOS
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ^14.1
      - name: Read OS Version
        uses: sersoft-gmbh/os-version-action@v2.0.1
        id: os-version
      - name: Read Swift Version
        uses: sersoft-gmbh/swift-version-action@v2.0.1
        id: swift-version
      - name: Compose destination
        id: destination
        env:
          PLATFORM: ${{ matrix.platform }}
        run: |
          if [ "${PLATFORM}" == 'macOS' ]; then
            echo "xcode=platform=${PLATFORM}" >> "${GITHUB_OUTPUT}"
            echo "cache-key=platform-${PLATFORM}" >> "${GITHUB_OUTPUT}"
          else
            REAL_PLATFORM="${PLATFORM}"
            DEV_NAME=''
            case "${PLATFORM}" in
              'iOS')
                DEV_NAME='iPhone 13 Pro'
                ;;
              'iPadOS')
                REAL_PLATFORM='iOS'
                DEV_NAME='iPad Pro (11-inch) (3rd generation)'
                ;;
              'tvOS')
                DEV_NAME='Apple TV 4K (2nd generation)'
                ;;
              'watchOS')
                DEV_NAME='Apple Watch Series 7 (45mm)'
                ;;
              *)
                echo "::error title=Unknown platform!::Unknown platform: ${PLATFORM}"
                exit 1
                ;;
            esac
            echo "xcode=platform=${REAL_PLATFORM} Simulator,OS=latest,name=${DEV_NAME}" >> "${GITHUB_OUTPUT}"
            echo "cache-key=platform-${REAL_PLATFORM}-device-$(echo "${DEV_NAME}" | tr -d ' ')" >> "${GITHUB_OUTPUT}"
          fi
      - uses: actions/checkout@v3.1.0
      - uses: actions/cache@v3.0.11
        with:
          path: .derived-data
          key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-xcode-${{ steps.swift-version.outputs.version }}-${{ steps.destination.outputs.cache-key }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.os-version.outputs.version }}-xcode-${{ steps.swift-version.outputs.version }}-${{ steps.destination.outputs.cache-key }}-
      - uses: sersoft-gmbh/xcodebuild-action@v2.0.1
        with:
          spm-package: './'
          scheme: apple-device-information
          destination: ${{ steps.destination.outputs.xcode }}
          action: test
          parallel-testing-enabled: ${{ matrix.platform != 'watchOS' }}
          enable-code-coverage: true
          derived-data-path: .derived-data
      - uses: sersoft-gmbh/swift-coverage-action@v3.0.1
        id: coverage-files
        with:
          search-paths: |
            ./.build
            ./.derived-data
            $HOME/Library/Developer/Xcode/DerivedData
      - uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ join(fromJSON(steps.coverage-files.outputs.files), ',') }}
          fail_ci_if_error: true
